/*
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.35) is used. For example, calling `/info` is the same as calling `/v1.35/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.35
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.wwscc.system.docker.models;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModelProperty;
import org.wwscc.system.docker.models.ProcessConfig;

/**
 * InlineResponse20014
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-03-20T16:57:44.859Z")
public class ExecStatus {
  @JsonProperty("ID")
  private String ID = null;

  @JsonProperty("Running")
  private Boolean running = null;

  @JsonProperty("ExitCode")
  private Integer exitCode = null;

  @JsonProperty("ProcessConfig")
  private ProcessConfig processConfig = null;

  @JsonProperty("OpenStdin")
  private Boolean openStdin = null;

  @JsonProperty("OpenStderr")
  private Boolean openStderr = null;

  @JsonProperty("OpenStdout")
  private Boolean openStdout = null;

  @JsonProperty("ContainerID")
  private String containerID = null;

  @JsonProperty("Pid")
  private Integer pid = null;

  public ExecStatus ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * Get ID
   * @return ID
  **/
  @ApiModelProperty(value = "")
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }

  public ExecStatus running(Boolean running) {
    this.running = running;
    return this;
  }

   /**
   * Get running
   * @return running
  **/
  @ApiModelProperty(value = "")
  public Boolean isRunning() {
    return running;
  }

  public void setRunning(Boolean running) {
    this.running = running;
  }

  public ExecStatus exitCode(Integer exitCode) {
    this.exitCode = exitCode;
    return this;
  }

   /**
   * Get exitCode
   * @return exitCode
  **/
  @ApiModelProperty(value = "")
  public Integer getExitCode() {
    return exitCode;
  }

  public void setExitCode(Integer exitCode) {
    this.exitCode = exitCode;
  }

  public ExecStatus processConfig(ProcessConfig processConfig) {
    this.processConfig = processConfig;
    return this;
  }

   /**
   * Get processConfig
   * @return processConfig
  **/
  @ApiModelProperty(value = "")
  public ProcessConfig getProcessConfig() {
    return processConfig;
  }

  public void setProcessConfig(ProcessConfig processConfig) {
    this.processConfig = processConfig;
  }

  public ExecStatus openStdin(Boolean openStdin) {
    this.openStdin = openStdin;
    return this;
  }

   /**
   * Get openStdin
   * @return openStdin
  **/
  @ApiModelProperty(value = "")
  public Boolean isOpenStdin() {
    return openStdin;
  }

  public void setOpenStdin(Boolean openStdin) {
    this.openStdin = openStdin;
  }

  public ExecStatus openStderr(Boolean openStderr) {
    this.openStderr = openStderr;
    return this;
  }

   /**
   * Get openStderr
   * @return openStderr
  **/
  @ApiModelProperty(value = "")
  public Boolean isOpenStderr() {
    return openStderr;
  }

  public void setOpenStderr(Boolean openStderr) {
    this.openStderr = openStderr;
  }

  public ExecStatus openStdout(Boolean openStdout) {
    this.openStdout = openStdout;
    return this;
  }

   /**
   * Get openStdout
   * @return openStdout
  **/
  @ApiModelProperty(value = "")
  public Boolean isOpenStdout() {
    return openStdout;
  }

  public void setOpenStdout(Boolean openStdout) {
    this.openStdout = openStdout;
  }

  public ExecStatus containerID(String containerID) {
    this.containerID = containerID;
    return this;
  }

   /**
   * Get containerID
   * @return containerID
  **/
  @ApiModelProperty(value = "")
  public String getContainerID() {
    return containerID;
  }

  public void setContainerID(String containerID) {
    this.containerID = containerID;
  }

  public ExecStatus pid(Integer pid) {
    this.pid = pid;
    return this;
  }

   /**
   * The system process ID for the exec process.
   * @return pid
  **/
  @ApiModelProperty(value = "The system process ID for the exec process.")
  public Integer getPid() {
    return pid;
  }

  public void setPid(Integer pid) {
    this.pid = pid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExecStatus inlineResponse20014 = (ExecStatus) o;
    return Objects.equals(this.ID, inlineResponse20014.ID) &&
        Objects.equals(this.running, inlineResponse20014.running) &&
        Objects.equals(this.exitCode, inlineResponse20014.exitCode) &&
        Objects.equals(this.processConfig, inlineResponse20014.processConfig) &&
        Objects.equals(this.openStdin, inlineResponse20014.openStdin) &&
        Objects.equals(this.openStderr, inlineResponse20014.openStderr) &&
        Objects.equals(this.openStdout, inlineResponse20014.openStdout) &&
        Objects.equals(this.containerID, inlineResponse20014.containerID) &&
        Objects.equals(this.pid, inlineResponse20014.pid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, running, exitCode, processConfig, openStdin, openStderr, openStdout, containerID, pid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20014 {\n");

    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    running: ").append(toIndentedString(running)).append("\n");
    sb.append("    exitCode: ").append(toIndentedString(exitCode)).append("\n");
    sb.append("    processConfig: ").append(toIndentedString(processConfig)).append("\n");
    sb.append("    openStdin: ").append(toIndentedString(openStdin)).append("\n");
    sb.append("    openStderr: ").append(toIndentedString(openStderr)).append("\n");
    sb.append("    openStdout: ").append(toIndentedString(openStdout)).append("\n");
    sb.append("    containerID: ").append(toIndentedString(containerID)).append("\n");
    sb.append("    pid: ").append(toIndentedString(pid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

