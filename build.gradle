plugins {
    id 'application'
    id 'eclipse'
    id "org.beryx.runtime" version "1.12.1"
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe'
            standardOutput = stdout
        }
        def ret = stdout.toString().trim()
        if (ret.contains('-'))
            throw new Exception("not on tag")
        return ret
    } catch (Exception e) {
        return "latest"
    }
}

import org.gradle.internal.os.OperatingSystem
def getOSName = { ->
    def os = OperatingSystem.current();
    if (os.isWindows()) return "win";
    if (os.isLinux()) return "linux";
    if (os.isMacOsX()) return "mac";
    return "Unknown";
}

version = getVersionName()
mainClassName = 'org.wwscc.system.ScorekeeperSystem'
repositories {
    jcenter()
}


def target = System.getProperty("target", getOSName())
def fxver = "13"

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'
    implementation 'com.github.jnr:jnr-unixsocket:0.38.19'
    implementation 'com.miglayout:miglayout-swing:5.2'
    implementation 'com.fazecast:jSerialComm:2.5.2'
    implementation 'com.jcraft:jsch:0.1.54'

    implementation 'io.swagger:swagger-annotations:1.5.18'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.kamranzafar:jtar:2.3'
    implementation 'org.mindrot:jbcrypt:0.4'
    implementation 'org.postgresql:postgresql:42.2.8'

    implementation "org.openjfx:javafx-base:$fxver:$target"
    implementation "org.openjfx:javafx-controls:$fxver:$target"
    implementation "org.openjfx:javafx-fxml:$fxver:$target"
    implementation "org.openjfx:javafx-media:$fxver:$target"
    implementation "org.openjfx:javafx-graphics:$fxver:$target"
    implementation "org.openjfx:javafx-swing:$fxver:$target"
    implementation "org.openjfx:javafx-web:$fxver:$target"

    testImplementation 'junit:junit:4.12'
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

def jmodules = [
    'java.base',
    'java.datatransfer',
    'java.desktop',
    'java.logging',
    'java.naming',
    'java.prefs',
    'java.scripting',
    'java.security.jgss',
    'java.security.sasl',
    'java.sql',
    'java.transaction.xa',
    'java.xml',
    'jdk.crypto.ec',
    'jdk.jfr',
    'jdk.jsobject',
    'jdk.unsupported',
    'jdk.unsupported.desktop',
    'jdk.xml.dom'
]

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    modules = jmodules

    targetPlatform(target) {
        def prefix = "https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.1%2B9/OpenJDK15U-jdk_x64"
        if (target == 'linux') {
            jdkHome = jdkDownload(prefix + "_linux_hotspot_15.0.1_9.tar.gz")
        } else if (target == 'win') {
            jdkHome = jdkDownload(prefix + "_windows_hotspot_15.0.1_9.zip")
        } else if (target == 'mac') {
            jdkHome = jdkDownload(prefix + "_mac_hotspot_15.0.1_9.tar.gz")
        }
    }

    launcher {
        noConsole = true
    }
}


task distrib {
    afterEvaluate { project ->
        dependsOn('runtime')
    }
    doLast {
        def dir = runtime.imageDir.get()
        def base = "$dir/$project.name"

        if (target == 'win') {
            delete "$base-$target/release"
            new File("$base-$target/Scorekeeper.bat").text = """
                cd %~dp0bin
                start javaw.exe -classpath "../lib/*" org.wwscc.system.ScorekeeperSystem
            """
            new File("$base-$target/ProTimer.bat").text = """
                cd %~dp0bin
                start javaw.exe -classpath "../lib/*" org.wwscc.protimer.ProSoloInterface
            """
            new File("$base-$target/fwrules.bat").text = """
                %echo off
                CALL :addrule ScorekeeperWeb       TCP 80
                CALL :addrule ScorekeeperTimers    TCP 54328
                CALL :addrule ScorekeeperDatabase  TCP 54329
                CALL :addrule ScorekeeperDNS       UDP 53
                CALL :addrule ScorekeeperMDNS      UDP 5353
                CALL :addrule ScorekeeperDiscovery UDP 5454

                CALL :disableservice w3svc
                CALL :disableservice SharedAccess

                pause
                exit /B 0

                :addrule
                netsh advfirewall firewall show rule name=%1
                if %ERRORLEVEL% NEQ 0  netsh advfirewall firewall add rule name=%1 dir=in action=allow protocol=%2 localport=%3
                EXIT /B 0

                :disableservice
                sc query %1
                if %ERRORLEVEL% EQU 0 sc stop %1 & sc config %1 start=disabled
                EXIT /B 0
            """
            createZip(new File("$base-$target"), new File("$base-$version-$target" + ".zip"))

        } else {
            delete "$base-$target/release"
            def s = "#!/usr/bin/env bash\n"
            s += "cd bin\n"
            s += './java -classpath "../lib/*" org.wwscc.system.ScorekeeperSystem\n'
            new File("$base-$target/Scorekeeper").text = s
            createZip(new File("$base-$target"), new File("$base-$version-$target" + ".zip"))
        }
    }
}


task innosetup(type:Exec) {
    commandLine "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe", "/DVersion=${version}", "windows.iss"
}


ext.createZip = { imageDir, zipFile ->
    def parentPath = imageDir.toPath()
    project.ant.zip(destfile: zipFile, duplicate: 'fail') {
        imageDir.eachFileRecurse { f ->
            int mode = f.canExecute() ? 755 : 644
            def relPath = parentPath.relativize(f.toPath()).toString()
            zipfileset(dir: parentPath, includes: relPath, filemode: mode)
        }
    }
}

/**************** Misc stuff ***************************/

task ver {
    doLast() { print "${version}" }
}

task depsize {
    doLast() {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        configurations.default.sort { -it.length() } .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println out
    }
}
