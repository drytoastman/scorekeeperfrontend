plugins {
    id 'application'
    id 'eclipse'
    id 'org.beryx.runtime' version '1.3.0'
}

import org.gradle.internal.os.OperatingSystem
def getOSName = { ->
    def os = OperatingSystem.current();
    if (os.isWindows()) return "win";
    if (os.isLinux()) return "linux";
    if (os.isMacOsX()) return "mac";
    return "Unknown";
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe'
            standardOutput = stdout
        }
        def ret = stdout.toString().trim()
        if (ret.contains('-'))
            throw new Exception("not on tag")
        return ret
    } catch (Exception e) {
        return "latest"
    }
}

version = getVersionName()
mainClassName = 'org.wwscc.system.ScorekeeperSystem'
def target = System.getProperty("target", getOSName())
def fxver = "13"
def basejdk  = file("jdk-12.0.2+10")
def macjdk   = file("jdk-12.0.2+10-mac")
def winjdk   = file("jdk-12.0.2+10-win")
def linuxjdk = file("jdk-12.0.2+10-linux")

repositories {
    jcenter()
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    compile 'com.github.jnr:jnr-unixsocket:0.23'
    compile 'com.miglayout:miglayout-swing:5.2'
    compile 'com.fazecast:jSerialComm:2.5.2'
    compile 'com.jcraft:jsch:0.1.54'
    compile 'io.swagger:swagger-annotations:1.5.18'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.10'
    compile 'org.kamranzafar:jtar:2.3'
    compile 'org.mindrot:jbcrypt:0.4'
    compile 'org.postgresql:postgresql:42.2.5'

    compile "org.openjfx:javafx-base:$fxver:$target"
    compile "org.openjfx:javafx-controls:$fxver:$target"
    compile "org.openjfx:javafx-fxml:$fxver:$target"
    compile "org.openjfx:javafx-media:$fxver:$target"
    compile "org.openjfx:javafx-graphics:$fxver:$target"
    compile "org.openjfx:javafx-swing:$fxver:$target"
    compile "org.openjfx:javafx-web:$fxver:$target"

    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

task macJDK() {
    doLast {
        if (!macjdk.exists()) {
            ant.get(src:  'https://github.com/AdoptOpenJDK/openjdk12-binaries/releases/download/jdk-12.0.2%2B10.3/OpenJDK12U-jdk_x64_mac_hotspot_12.0.2_10.tar.gz',
                    dest: 'mac.tar.gz')
            copy { from tarTree(resources.gzip('mac.tar.gz')) into projectDir }
            file(basejdk.toString()+'/Contents/Home').renameTo(macjdk)
            basejdk.deleteDir()
        }
    }
}

task linuxJDK() {
    doLast {
        if (!linuxjdk.exists()) {
            ant.get(src:  'https://github.com/AdoptOpenJDK/openjdk12-binaries/releases/download/jdk-12.0.2%2B10/OpenJDK12U-jdk_x64_linux_hotspot_12.0.2_10.tar.gz',
                    dest: 'linux.tar.gz')
            copy { from tarTree(resources.gzip('linux.tar.gz')) into projectDir }
            basejdk.renameTo(linuxjdk)
        }
    }
}

task winJDK() {
    doLast {
        if (!winjdk.exists()) {
            ant.get(src:  'https://github.com/AdoptOpenJDK/openjdk12-binaries/releases/download/jdk-12.0.2%2B10/OpenJDK12U-jdk_x64_windows_hotspot_12.0.2_10.zip',
                    dest: 'win.zip')
            copy { from zipTree('win.zip') into projectDir }
            basejdk.renameTo(winjdk)
        }
    }
}

runtime {
    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages'
       ]
    modules = [
        'java.base',
        'java.datatransfer',
        'java.desktop',
        'java.logging',
        'java.naming',
        'java.prefs',
        'java.scripting',
        'java.security.jgss',
        'java.security.sasl',
        'java.sql',
        'java.transaction.xa',
        'java.xml',
        'jdk.jfr',
        'jdk.jsobject',
        'jdk.unsupported',
        'jdk.unsupported.desktop',
        'jdk.xml.dom'
    ]

    imageZip = file("build/final/Scorekeeper")
    targetPlatform("$target-$version",  "$projectDir/jdk-12.0.2+10-$target")
}

task ver {
    doLast() { print "${version}" }
}

task createUbuntuSetup (type: Copy) {
    from 'installers'
    into "$buildDir"
    include 'ubuntu.template'
    rename('ubuntu.template', "ubuntusetup-${version}.sh")
    expand(git_version: version)
}

task depsize {
    doLast() {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        configurations.default.sort { -it.length() } .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println out
    }
}

task wininstaller (type: Exec) {
    commandLine 'docker', 'run', '--rm', '-v', "$projectDir:/code", 'drytoastman/innosetup:latest',
                'bash', '-c', "cd /code && iscc /DVersion=${version} installers/windows.iss"
}
