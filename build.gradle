plugins {
    id 'application'
    id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.3.0'
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return "latest"
    }
}

version = getVersionName()
mainClassName = 'org.wwscc.system.ScorekeeperSystem'

javafx {
    version = "13"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing' ]
}

repositories {
    jcenter()
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    compile 'com.github.jnr:jnr-unixsocket:0.23'
    compile 'com.miglayout:miglayout-swing:5.2'
    compile 'com.fazecast:jSerialComm:2.5.2'
    compile 'com.jcraft:jsch:0.1.54'
    compile 'io.swagger:swagger-annotations:1.5.18'
    compile 'javax.annotation:javax.annotation-api:1.3.2'
    compile 'org.apache.httpcomponents:httpclient:4.5.10'
    compile 'org.kamranzafar:jtar:2.3'
    compile 'org.mindrot:jbcrypt:0.4'
    compile 'org.postgresql:postgresql:42.2.5'

    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

runtime {
    options = [
        '--strip-debug',
        '--compress', '2',
        '--no-header-files',
        '--no-man-pages'
       ]
    modules = [
        'java.base',
        'java.datatransfer',
        'java.desktop',
        'java.logging',
        'java.naming',
        'java.prefs',
        'java.scripting',
        'java.security.jgss',
        'java.security.sasl',
        'java.sql',
        'java.transaction.xa',
        'java.xml',
        'jdk.jfr',
        'jdk.jsobject',
        'jdk.unsupported',
        'jdk.unsupported.desktop',
        'jdk.xml.dom'
    ]
}

task createUbuntuSetup (type: Copy) {
    from 'installers'
    into "$buildDir"
    include 'ubuntu.template'
    rename('ubuntu.template', "ubuntusetup-${version}.sh")
    expand(git_version: version)
}

task depsize {
    doLast() {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        configurations.default.sort { -it.length() } .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println out
    }
}

task installer (type: Exec) {
    commandLine 'c:\\Program Files (x86)\\Inno Setup 5\\ISCC.exe', '/DVersion='+version, 'installers\\windows.iss'
}