import org.gradle.plugins.ide.eclipse.model.AccessRule

buildscript {
    repositories { jcenter() }
    dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1' }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'eclipse'

eclipse {
    classpath {
        file {
            whenMerged {
              // remove warnings about non-API class use
              // these are javafx API, I don't know why it complains about those classes
                def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                jre.accessRules.add(new AccessRule('0', 'javafx/**'))
            }
        }
    }
}


def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    } catch (Exception e) {
        return "latest"
    }
}

version = getVersionName()
sourceCompatibility = 1.8
mainClassName = 'org.wwscc.system.ScorekeeperSystem'
shadowJar.classifier = ""
shadowJar.baseName = "scorekeeper"
defaultTasks 'shadowJar'


repositories {
    jcenter()
}

dependencies {
    compile 'com.miglayout:miglayout-swing:5.0'
    compile 'com.neuronrobotics:nrjavaserial:3.12.1'
    compile 'org.postgresql:postgresql:42.1.4'
    compile 'com.jcraft:jsch:0.1.54'
    compile 'commons-io:commons-io:2.6'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'

    testCompile 'junit:junit:4.12'
}

jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

task createUbuntuSetup (type: Copy) {
    from 'installers'
    into "$buildDir"
    include 'ubuntu.template'
    rename('ubuntu.template', "ubuntusetup-${version}.sh")
    expand(git_version: version)
}

task depsize {
    doLast() {
        def size = 0
        def formatStr = "%,10.2f"
        configurations.default.collect { it.length() / (1024 * 1024) }.each { size += it }

        def out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        configurations.default.sort { -it.length() } .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println out
    }
}

